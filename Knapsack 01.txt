import java.util.* ;
import java.io.*; 

public class Solution{//Recursion----------------------
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int res = helper(weight,value,n,maxWeight,0);
        return res;
    }
    static int helper(int[] weight,int[] value,int n,int maxW,int idx){
        if(idx>=n)
            return 0;
        int num1 = 0;
        if((maxW - weight[idx]) >= 0)
            num1 = value[idx] + helper(weight,value,n,maxW-weight[idx],idx+1);
        int num2 = helper(weight,value,n,maxW,idx+1);
        int res = Math.max(num1,num2);
        return res;
    }
}



import java.util.* ;
import java.io.*; 

public class Solution{//Memoisation--------------------
    static int knapsack(int[] weight, int[] value, int n, int maxWeight) {
        int[][] dp = new int[maxWeight+1][n+1];
        int res = helper(weight,value,n,maxWeight,0,dp);
        return res;
    }
    static int helper(int[] weight,int[] value,int n,int maxW,int idx,int[][] dp){
        if(idx>=n)
            return 0;
        int num1 = 0;
        if(dp[maxW][idx]!=0)
            return dp[maxW][idx];
        if((maxW - weight[idx]) >= 0)
            num1 = value[idx] + helper(weight,value,n,maxW-weight[idx],idx+1,dp);
        int num2 = helper(weight,value,n,maxW,idx+1,dp);
        int res = Math.max(num1,num2);
        dp[maxW][idx] = res;
        return res;
    }
}